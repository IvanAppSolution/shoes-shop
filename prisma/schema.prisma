// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  premium       Boolean   @default(false)
  banExpires    Int? /// Unix timestamp for ban expiration
  cartItems     Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  address       Address[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? @db.Timestamp
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  idToken String?

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Product {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  brand       String?
  price       Float
  offerPrice Float
  images      String[]
  category    String?
  tags        String?
  inStock     Boolean  @default(false)
  weight      String?
  quantity    Int?     @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? @db.Timestamp
}


model Address {
  id            String     @id @default(cuid()) @map("_id")
  userId        String
  firstName     String
  lastName      String
  email         String?
  street        String?   
  city          String?
  state         String?
  zipcode       String?
  country       String?
  phone         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}